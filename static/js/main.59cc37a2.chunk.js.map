{"version":3,"sources":["App.js","components/KeyPad.js","components/Output.js","serviceWorker.js","index.js"],"names":["App","state","result","buttonPressed","buttonName","calculate","reset","backspace","setState","slice","eval","e","className","this","React","Component","KeyPad","props","target","name","onClick","Output","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"61CAKMA,I,8qBAEJC,MAAQ,CACNC,OAAQ,I,MAGVC,cAAgB,SAAAC,GACK,MAAfA,EACF,MAAKC,YACmB,OAAfD,EACT,MAAKE,QACmB,OAAfF,EACT,MAAKG,YAEL,MAAKC,SAAS,CACZN,OAAQ,MAAKD,MAAMC,OAASE,K,MAIlCG,UAAY,WACV,MAAKC,SAAS,CACZF,MAAO,MAAKL,MAAMC,OAAOO,MAAM,GAAI,M,MAGvCH,MAAQ,WACN,MAAKE,SAAS,CACZN,OAAQ,M,MAGZG,UAAY,WACV,IACE,MAAKG,SAAS,CACZN,QAASQ,KAAK,MAAKT,MAAMC,SAAW,IAAM,KAE9C,MAAOS,GACP,MAAKH,SAAS,CACZN,OAAQ,Y,sUAMV,OACE,kEAAKU,UAAU,OACb,kEAAKA,UAAU,aACb,kEAAKA,UAAU,QACb,2DAAC,qDAAD,CAAQV,OAAQW,KAAKZ,MAAMC,SAC3B,2DAAC,qDAAD,CAAQC,cAAeU,KAAKV,uB,KA/CtBW,6CAAMC,WAuDTf,2B,sHC1DMgB,E,2MACjBb,cAAgB,SAAAQ,GACZ,EAAKM,MAAMd,cAAcQ,EAAEO,OAAOC,O,wEAGlC,OACI,yBAAKP,UAAU,WACX,6BACI,4BAAQA,UAAU,KAAKO,KAAK,KAAKC,QAASP,KAAKV,eAA/C,MACA,4BAAQS,UAAU,MAAMO,KAAK,IAAIC,QAASP,KAAKV,eAA/C,KACA,4BAAQS,UAAU,MAAMO,KAAK,IAAIC,QAASP,KAAKV,eAA/C,KACA,4BAAQS,UAAU,QAAQO,KAAK,IAAIC,QAASP,KAAKV,eAAjD,MAGJ,6BACI,4BAAQS,UAAU,OAAOO,KAAK,IAAIC,QAASP,KAAKV,eAAhD,KACA,4BAAQS,UAAU,OAAOO,KAAK,IAAIC,QAASP,KAAKV,eAAhD,KACA,4BAAQS,UAAU,OAAOO,KAAK,IAAIC,QAASP,KAAKV,eAAhD,KACA,4BAAQS,UAAU,QAAQO,KAAK,IAAIC,QAASP,KAAKV,eAAjD,MAGJ,6BACI,4BAAQS,UAAU,OAAOO,KAAK,IAAIC,QAASP,KAAKV,eAAhD,KACA,4BAAQS,UAAU,OAAOO,KAAK,IAAIC,QAASP,KAAKV,eAAhD,KACA,4BAAQS,UAAU,OAAOO,KAAK,IAAIC,QAASP,KAAKV,eAAhD,KACA,4BAAQS,UAAU,QAAQO,KAAK,IAAIC,QAASP,KAAKV,eAAjD,MAGJ,6BACI,4BAAQS,UAAU,QAAQO,KAAK,IAAIC,QAASP,KAAKV,eAAjD,KACA,4BAAQS,UAAU,OAAOO,KAAK,IAAIC,QAASP,KAAKV,eAAhD,KACA,4BAAQS,UAAU,OAAOO,KAAK,IAAIC,QAASP,KAAKV,eAAhD,KACA,4BAAQS,UAAU,QAAQO,KAAK,IAAIC,QAASP,KAAKV,eAAjD,MAGJ,6BACI,4BAAQS,UAAU,OAAOO,KAAK,IAAIC,QAASP,KAAKV,eAAhD,KACA,4BAAQS,UAAU,MAAMO,KAAK,IAAIC,QAASP,KAAKV,eAA/C,KACA,4BAAQS,UAAU,QAAQO,KAAK,IAAIC,QAASP,KAAKV,eAAjD,W,GAtCgBY,c,oFCA9BM,E,iLAGE,OACI,yBAAKT,UAAU,mBACX,uBAAGA,UAAU,UAAUC,KAAKI,MAAMf,a,GAL7BY,IAAMC,WAWZM,O,gKCDKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC5B,EAAA,EAAD,MAAS6B,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.59cc37a2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport KeyPad from './components/KeyPad.js';\nimport Output from './components/Output.js';\n\nclass App extends React.Component {\n\n  state = {\n    result: ''\n  };\n\n  buttonPressed = buttonName => {\n    if (buttonName === '=') {\n      this.calculate()\n    } else if (buttonName === 'AC') {\n      this.reset();\n    } else if (buttonName === 'CE') {\n      this.backspace();\n    } else \n      this.setState({\n        result: this.state.result + buttonName\n      });\n  };\n\n  backspace = () => {\n    this.setState({\n      reset: this.state.result.slice(0, -1)\n    });\n  };\n  reset = () => {\n    this.setState({\n      result: ''\n    })\n  }\n  calculate = () => {\n    try {\n      this.setState({\n        result: (eval(this.state.result) || '') + ''\n    });\n  } catch (e) {\n    this.setState({\n      result: 'error'\n    });\n  }\n};\n\n  render () {\n    return (\n      <div className='App'>\n        <div className='container'>\n          <div className='body'>\n            <Output result={this.state.result} />\n            <KeyPad buttonPressed={this.buttonPressed} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React, { Component } from 'react'\n\nexport default class KeyPad extends Component {\n    buttonPressed = e => {\n        this.props.buttonPressed(e.target.name);\n    };\n    render() {\n        return (\n            <div className='buttons'>\n                <div>\n                    <button className='AC' name='AC' onClick={this.buttonPressed}>AC</button>\n                    <button className='top' name='(' onClick={this.buttonPressed}>(</button>\n                    <button className='top' name=')' onClick={this.buttonPressed}>)</button>\n                    <button className='oper1' name='/' onClick={this.buttonPressed}>/</button>\n                </div>\n\n                <div>\n                    <button className='nums' name='7' onClick={this.buttonPressed}>7</button>\n                    <button className='nums' name='8' onClick={this.buttonPressed}>8</button>\n                    <button className='nums' name='9' onClick={this.buttonPressed}>9</button>\n                    <button className='oper2' name='*' onClick={this.buttonPressed}>*</button>\n                </div>\n\n                <div>\n                    <button className='nums' name='4' onClick={this.buttonPressed}>4</button>\n                    <button className='nums' name='5' onClick={this.buttonPressed}>5</button>\n                    <button className='nums' name='6' onClick={this.buttonPressed}>6</button>\n                    <button className='oper3' name='-' onClick={this.buttonPressed}>-</button>\n                </div>\n\n                <div>\n                    <button className='nums1' name='1' onClick={this.buttonPressed}>1</button>\n                    <button className='nums' name='2' onClick={this.buttonPressed}>2</button>\n                    <button className='nums' name='3' onClick={this.buttonPressed}>3</button>\n                    <button className='oper4' name='+' onClick={this.buttonPressed}>+</button>\n                </div>\n\n                <div>\n                    <button className='zero' name='0' onClick={this.buttonPressed}>0</button>\n                    <button className='dot' name='.' onClick={this.buttonPressed}>.</button>\n                    <button className='oper5' name='=' onClick={this.buttonPressed}>=</button>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react'\n\nclass Output extends React.Component {\n\n    render() {\n        return (\n            <div className='resultContainer'>\n                <p className='result'>{this.props.result}</p>\n            </div>\n        )\n    }\n}\n\nexport default Output;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}